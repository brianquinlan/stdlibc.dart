// ignore_for_file: non_positive_array_dimension, unused_field

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bionic C Library
class BionicLibC {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BionicLibC(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BionicLibC.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Returns the address of the calling thread's `errno` storage.
  /// Non-portable and should not be used directly. Use `errno` instead.
  ///
  /// @private
  ffi.Pointer<ffi.Int> errno() {
    return _errno();
  }

  late final _errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>('__errno');
  late final _errno = _errnoPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int fstat(
    int __fd,
    ffi.Pointer<stat_t> __buf,
  ) {
    return _fstat(
      __fd,
      __buf,
    );
  }

  late final _fstatPtr = _lookup<
      ffi
      .NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<stat_t>)>>('fstat');
  late final _fstat =
      _fstatPtr.asFunction<int Function(int, ffi.Pointer<stat_t>)>();

  int lstat(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<stat_t> __buf,
  ) {
    return _lstat(
      __path,
      __buf,
    );
  }

  late final _lstatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<stat_t>)>>('lstat');
  late final _lstat = _lstatPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<stat_t>)>();

  int stat(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<stat_t> __buf,
  ) {
    return _stat(
      __path,
      __buf,
    );
  }

  late final _statPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<stat_t>)>>('stat');
  late final _stat = _statPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<stat_t>)>();
}

const int E2BIG = 7;

const int EACCES = 13;

const int EADDRINUSE = 98;

const int EADDRNOTAVAIL = 99;

const int EADV = 68;

const int EAFNOSUPPORT = 97;

const int EAGAIN = 11;

const int EALREADY = 114;

const int EBADE = 52;

const int EBADF = 9;

const int EBADFD = 77;

const int EBADMSG = 74;

const int EBADR = 53;

const int EBADRQC = 56;

const int EBADSLT = 57;

const int EBFONT = 59;

const int EBUSY = 16;

const int ECANCELED = 125;

const int ECHILD = 10;

const int ECHRNG = 44;

const int ECOMM = 70;

const int ECONNABORTED = 103;

const int ECONNREFUSED = 111;

const int ECONNRESET = 104;

const int EDEADLK = 35;

const int EDEADLOCK = 35;

const int EDESTADDRREQ = 89;

const int EDOM = 33;

const int EDOTDOT = 73;

const int EDQUOT = 122;

const int EEXIST = 17;

const int EFAULT = 14;

const int EFBIG = 27;

const int EHOSTDOWN = 112;

const int EHOSTUNREACH = 113;

const int EHWPOISON = 133;

const int EIDRM = 43;

const int EILSEQ = 84;

const int EINPROGRESS = 115;

const int EINTR = 4;

const int EINVAL = 22;

const int EIO = 5;

const int EISCONN = 106;

const int EISDIR = 21;

const int EISNAM = 120;

const int EKEYEXPIRED = 127;

const int EKEYREJECTED = 129;

const int EKEYREVOKED = 128;

const int EL2HLT = 51;

const int EL2NSYNC = 45;

const int EL3HLT = 46;

const int EL3RST = 47;

const int ELIBACC = 79;

const int ELIBBAD = 80;

const int ELIBEXEC = 83;

const int ELIBMAX = 82;

const int ELIBSCN = 81;

const int ELNRNG = 48;

const int ELOOP = 40;

const int EMEDIUMTYPE = 124;

const int EMFILE = 24;

const int EMLINK = 31;

const int EMSGSIZE = 90;

const int EMULTIHOP = 72;

const int ENAMETOOLONG = 36;

const int ENAVAIL = 119;

const int ENETDOWN = 100;

const int ENETRESET = 102;

const int ENETUNREACH = 101;

const int ENFILE = 23;

const int ENOANO = 55;

const int ENOBUFS = 105;

const int ENOCSI = 50;

const int ENODATA = 61;

const int ENODEV = 19;

const int ENOENT = 2;

const int ENOEXEC = 8;

const int ENOKEY = 126;

const int ENOLCK = 37;

const int ENOLINK = 67;

const int ENOMEDIUM = 123;

const int ENOMEM = 12;

const int ENOMSG = 42;

const int ENONET = 64;

const int ENOPKG = 65;

const int ENOPROTOOPT = 92;

const int ENOSPC = 28;

const int ENOSR = 63;

const int ENOSTR = 60;

const int ENOSYS = 38;

const int ENOTBLK = 15;

const int ENOTCONN = 107;

const int ENOTDIR = 20;

const int ENOTEMPTY = 39;

const int ENOTNAM = 118;

const int ENOTRECOVERABLE = 131;

const int ENOTSOCK = 88;

const int ENOTSUP = 95;

const int ENOTTY = 25;

const int ENOTUNIQ = 76;

const int ENXIO = 6;

const int EOPNOTSUPP = 95;

const int EOVERFLOW = 75;

const int EOWNERDEAD = 130;

const int EPERM = 1;

const int EPFNOSUPPORT = 96;

const int EPIPE = 32;

const int EPROTO = 71;

const int EPROTONOSUPPORT = 93;

const int EPROTOTYPE = 91;

const int ERANGE = 34;

const int EREMCHG = 78;

const int EREMOTE = 66;

const int EREMOTEIO = 121;

const int ERESTART = 85;

const int ERFKILL = 132;

const int EROFS = 30;

const int ESHUTDOWN = 108;

const int ESOCKTNOSUPPORT = 94;

const int ESPIPE = 29;

const int ESRCH = 3;

const int ESRMNT = 69;

const int ESTALE = 116;

const int ESTRPIPE = 86;

const int ETIME = 62;

const int ETIMEDOUT = 110;

const int ETOOMANYREFS = 109;

const int ETXTBSY = 26;

const int EUCLEAN = 117;

const int EUNATCH = 49;

const int EUSERS = 87;

const int EWOULDBLOCK = 11;

const int EXDEV = 18;

const int EXFULL = 54;

const int INT16_MAX = 32767;

const int INT16_MIN = -32768;

const int INT32_MAX = 2147483647;

const int INT32_MIN = -2147483648;

const int INT64_MAX = 9223372036854775807;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT8_MIN = -128;

const int INTMAX_MAX = 9223372036854775807;

const int INTMAX_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MAX = 9223372036854775807;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST8_MIN = -128;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MAX = 9223372036854775807;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST8_MIN = -128;

const int PTRDIFF_MAX = 9223372036854775807;

const int PTRDIFF_MIN = -9223372036854775808;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIZE_MAX = -1;

const int STATX_ALL = 4095;

const int STATX_ATIME = 32;

const int STATX_ATTR_APPEND = 32;

const int STATX_ATTR_AUTOMOUNT = 4096;

const int STATX_ATTR_COMPRESSED = 4;

const int STATX_ATTR_DAX = 2097152;

const int STATX_ATTR_ENCRYPTED = 2048;

const int STATX_ATTR_IMMUTABLE = 16;

const int STATX_ATTR_MOUNT_ROOT = 8192;

const int STATX_ATTR_NODUMP = 64;

const int STATX_ATTR_VERITY = 1048576;

const int STATX_BASIC_STATS = 2047;

const int STATX_BLOCKS = 1024;

const int STATX_BTIME = 2048;

const int STATX_CTIME = 128;

const int STATX_DIOALIGN = 8192;

const int STATX_GID = 16;

const int STATX_INO = 256;

const int STATX_MNT_ID = 4096;

const int STATX_MODE = 2;

const int STATX_MTIME = 64;

const int STATX_NLINK = 4;

const int STATX_SIZE = 512;

const int STATX_TYPE = 1;

const int STATX_UID = 8;

const int STATX__RESERVED = 2147483648;

const int S_IFBLK = 24576;

const int S_IFCHR = 8192;

const int S_IFDIR = 16384;

const int S_IFIFO = 4096;

const int S_IFLNK = 40960;

const int S_IFMT = 61440;

const int S_IFREG = 32768;

const int S_IFSOCK = 49152;

const int S_IRGRP = 32;

const int S_IROTH = 4;

const int S_IRUSR = 256;

const int S_IRWXG = 56;

const int S_IRWXO = 7;

const int S_IRWXU = 448;

const int S_ISGID = 1024;

const int S_ISUID = 2048;

const int S_ISVTX = 512;

const int S_IWGRP = 16;

const int S_IWOTH = 2;

const int S_IWUSR = 128;

const int S_IXGRP = 8;

const int S_IXOTH = 1;

const int S_IXUSR = 64;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int UINT8_MAX = 255;

const int UINTMAX_MAX = -1;

const int UINTPTR_MAX = -1;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int UINT_FAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int UINT_LEAST8_MAX = 255;

const int UTIME_NOW = 1073741823;

const int UTIME_OMIT = 1073741822;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int WINT_MIN = -2147483648;

final class stat_t extends ffi.Struct {
  @ffi.Uint64()
  external int st_dev;

  @ffi.UnsignedLong()
  external int st_ino;

  @ffi.UnsignedShort()
  external int st_mode;

  @ffi.Uint32()
  external int st_nlink;

  @ffi.UnsignedInt()
  external int st_uid;

  @ffi.UnsignedInt()
  external int st_gid;

  @ffi.Uint64()
  external int st_rdev;

  @ffi.UnsignedLong()
  external int __pad1;

  @ffi.Int64()
  external int st_size;

  @ffi.Int()
  external int st_blksize;

  @ffi.Int()
  external int __pad2;

  @ffi.Long()
  external int st_blocks;

  external timespec_t st_atim;

  external timespec_t st_mtim;

  external timespec_t st_ctim;

  @ffi.UnsignedInt()
  external int __unused4;

  @ffi.UnsignedInt()
  external int __unused5;
}

final class timespec_t extends ffi.Struct {
  @ffi.Long()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}
