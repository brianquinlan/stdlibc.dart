// ignore_for_file: non_positive_array_dimension, unused_field

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bionic C Library
class BionicLibC {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BionicLibC(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BionicLibC.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int fstat(
    int __fd,
    ffi.Pointer<stat_t> __buf,
  ) {
    return _fstat(
      __fd,
      __buf,
    );
  }

  late final _fstatPtr = _lookup<
      ffi
      .NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<stat_t>)>>('fstat');
  late final _fstat =
      _fstatPtr.asFunction<int Function(int, ffi.Pointer<stat_t>)>();

  int lstat(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<stat_t> __buf,
  ) {
    return _lstat(
      __path,
      __buf,
    );
  }

  late final _lstatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<stat_t>)>>('lstat');
  late final _lstat = _lstatPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<stat_t>)>();

  int stat(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<stat_t> __buf,
  ) {
    return _stat(
      __path,
      __buf,
    );
  }

  late final _statPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<stat_t>)>>('stat');
  late final _stat = _statPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<stat_t>)>();
}

const int INT16_MAX = 32767;

const int INT16_MIN = -32768;

const int INT32_MAX = 2147483647;

const int INT32_MIN = -2147483648;

const int INT64_MAX = 9223372036854775807;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT8_MIN = -128;

const int INTMAX_MAX = 9223372036854775807;

const int INTMAX_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MAX = 9223372036854775807;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST8_MIN = -128;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MAX = 9223372036854775807;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST8_MIN = -128;

const int NULL = 0;

const int PTRDIFF_MAX = 9223372036854775807;

const int PTRDIFF_MIN = -9223372036854775808;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIZE_MAX = -1;

const int STATX_ALL = 4095;

const int STATX_ATIME = 32;

const int STATX_ATTR_APPEND = 32;

const int STATX_ATTR_AUTOMOUNT = 4096;

const int STATX_ATTR_COMPRESSED = 4;

const int STATX_ATTR_DAX = 2097152;

const int STATX_ATTR_ENCRYPTED = 2048;

const int STATX_ATTR_IMMUTABLE = 16;

const int STATX_ATTR_MOUNT_ROOT = 8192;

const int STATX_ATTR_NODUMP = 64;

const int STATX_ATTR_VERITY = 1048576;

const int STATX_BASIC_STATS = 2047;

const int STATX_BLOCKS = 1024;

const int STATX_BTIME = 2048;

const int STATX_CTIME = 128;

const int STATX_DIOALIGN = 8192;

const int STATX_GID = 16;

const int STATX_INO = 256;

const int STATX_MNT_ID = 4096;

const int STATX_MODE = 2;

const int STATX_MTIME = 64;

const int STATX_NLINK = 4;

const int STATX_SIZE = 512;

const int STATX_TYPE = 1;

const int STATX_UID = 8;

const int STATX__RESERVED = 2147483648;

const int S_IFBLK = 24576;

const int S_IFCHR = 8192;

const int S_IFDIR = 16384;

const int S_IFIFO = 4096;

const int S_IFLNK = 40960;

const int S_IFMT = 61440;

const int S_IFREG = 32768;

const int S_IFSOCK = 49152;

const int S_IRGRP = 32;

const int S_IROTH = 4;

const int S_IRUSR = 256;

const int S_IRWXG = 56;

const int S_IRWXO = 7;

const int S_IRWXU = 448;

const int S_ISGID = 1024;

const int S_ISUID = 2048;

const int S_ISVTX = 512;

const int S_IWGRP = 16;

const int S_IWOTH = 2;

const int S_IWUSR = 128;

const int S_IXGRP = 8;

const int S_IXOTH = 1;

const int S_IXUSR = 64;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int UINT8_MAX = 255;

const int UINTMAX_MAX = -1;

const int UINTPTR_MAX = -1;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int UINT_FAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int UINT_LEAST8_MAX = 255;

const int USER_ADDR_NULL = 0;

const int UTIME_NOW = 1073741823;

const int UTIME_OMIT = 1073741822;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int WINT_MIN = -2147483648;

final class stat_t extends ffi.Struct {
  @ffi.Uint64()
  external int st_dev;

  @ffi.Int()
  external int st_ino;

  @ffi.Int()
  external int st_mode;

  @ffi.Uint32()
  external int st_nlink;

  @ffi.Int()
  external int st_uid;

  @ffi.Int()
  external int st_gid;

  @ffi.Uint64()
  external int st_rdev;

  @ffi.UnsignedLong()
  external int __pad1;

  @ffi.Int64()
  external int st_size;

  @ffi.Int()
  external int st_blksize;

  @ffi.Int()
  external int __pad2;

  @ffi.Long()
  external int st_blocks;

  external timespec_t st_atim;

  external timespec_t st_mtim;

  external timespec_t st_ctim;

  @ffi.UnsignedInt()
  external int __unused4;

  @ffi.UnsignedInt()
  external int __unused5;
}

/// Represents a time.
final class timespec_t extends ffi.Struct {
  /// Number of seconds.
  @ffi.Int()
  external int tv_sec;

  /// Number of nanoseconds. Must be less than 1,000,000,000.
  @ffi.Long()
  external int tv_nsec;
}
